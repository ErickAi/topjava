<!--Слои приложения. Создание каркаса. Spring Framework. Spring Context-->
	java.ru.javawebinar.topjava
					model
<!--v унаследовать еду и юзера от абстракций. перенести превышение в пакет ТО-->
<!--реализовать еду во всех слоях-->	
						-AbstractBaseEntity.java
						-AbstractNamedEntity.java
						-Meal.java
						-MealWithExceed.java
						-Role.java
						-User.java
					repository
						mock
<!--v реализовать мок базы со списком всей еды всех пользователей. смотри 3й пункт.-->	
							-InMemoryMealRepositoryImpl.java
<!--v добавить заглушку базы данных написать мапу, возвращающую сортированных пользователей-->						
							-MockUserRepositoryImpl.java
						-MealRepository.java
						-UserRepository.java
					service
						-MealService.java
						-MealServiceImpl.java
						-UserService.java
						-UserServiceImpl.java
					util
						exception
							-NotFoundException.java
						-DateTimeUtil.java
						-MealsUtil.java
						-ValidationUtil.java
					web
						meal
							-MealRestController.java
						user
							-AbstractUserController.java
							-AdminRestController.java
							-ProfileRestController.java
						-MealServlet.java
						-UserServlet.java
					-AuthorizedUser.java
					-SpringMain.java
	resources
		spring
<!--v добавить еду в контекст спринга-->	
			-spring-app.xml
		-logback.xml
	webapp
		WEB-INF
			tld
				-functions.tld
			-web.xml
		-index.html
		-mealForm.jsp
		-meals.jsp
		-users.jsp
	-main.iml
<!---->	
1: переименовать MockUserRepositoryImpl в InMemoryUserRepositoryImpl и имплементировать по аналогии с InMemoryMealRepositoryImpl 
	(список пользователей возвращать отсортированным по имени)
2: сделать Meal extends AbstractBaseEntity, MealWithExceed перенести в пакет ru.javawebinar.topjava.to (transfer objects)
3: изменить MealRepository/InMemoryMealRepositoryImpl: в одном общем хранилище хранится вся еда всех пользователей. 
	Любой пользователь авторизуется и видит/модифицирует только свою еду.
3.1: если по запрошенному id еда отсутствует или чужая, возвращать null/false (см. комментарии в UserRepository)
3.2: реализовать хранение еды для каждого пользователя можно с добавлением поля userId в Meal ИЛИ без него (как нравится). 
	Напомню, что репозиторий один и приложение может работать одновременно с многими пользователями.
3.3: список еды возвращать отсортированным по времени, последние записи наверху
3.4: атомарность операций не требуется (коллизии при одновременном изменении одного пользователя можно не учитывать)
4: Реализовать слои приложения для функциональности "еда". API контроллера должна удовлетворять все потребности демо приложения 
	и ничего лишнего (см. демо).
	Смотрите на реализацию слоя для user и делаете по аналогии! Если там что-то непонятно, не надо исправлять или делать по своему. 
	Задавайте вопросы. Если действительно нужна правка - я сделаю и напишу всем.
4.1: после авторизации (сделаем позднее), id авторизованного юзера будет попадать в AuthorizedUser.id(). 
	Запрос попадает в контроллер, методы которого будут доступны снаружи по http, т.е. запрос можно будет сделать 
	с ЛЮБЫМ id для еды (не принадлежащем авторизированному пользователю). Нельзя позволять модифицировать/смотреть чужую еду.
4.2: AuthorizedUser известен только на слое web (см. реализацию ProfileRestController). MealService можно тестировать 
	без подмены логики авторизации, принимаем в методах сервиса и репозитория параметр userId: id владельца еды.
4.3: если еда не принадлежит авторизированному пользователю или отсутствует, в MealServiceImpl бросать NotFoundException.
4.4: конвертацию в MealWithExceeded можно делать как в слое web, так и в service (Mapping Entity->DTO: Controller or Service?)
4.5: в MealServiceImpl постараться сделать в каждом методе только одни запрос к MealRepository
4.6 еще раз: не надо в названиях методов повторять названия класса (Meal).
5: включить классы еды в контекст Spring (добавить аннотации) и вызвать из SpringMain любой метод MealRestController 
	(проверить что Spring все корректно заинжектил)

	Optional
6: в MealServlet сделать инициализацию Spring, достать MealRestController из контекста и работать с едой через него 
	(как в SpringMain). pom.xml НЕ менять, работаем со spring-context. Сервлет обращается к контролеру, 
	контроллер вызывает сервис, сервис - репозиторий.
6.1: учесть, что когда будем работать через Spring MVC, MealServlet удалим, те вся логика должна быть в контроллере
7: добавить в meals.jsp и MealServlet две отдельные фильтрации еды: по дате и по времени (см. демо)
8: добавить выбор текущего залогиненного пользователя (имитация авторизации, сделать Select с двумя элементами 
	со значениями 1 и 2 в index.html и AuthorizedUser.setId(userId) в UserServlet). 
	Настоящая атворизация будет через Spring Security позже.
